package com.dataObjects;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.annotations.SerializedName;

import java.io.Serializable;
import java.util.ArrayList;

/**
 * Java Bean class to hold the properties of a Category returned from the IGC API.
 */
public class Category extends IGCResource implements Serializable {
    /**
     * Stores type. Should always be "category".
     * Set in constructors.
     */
    private String _type;

    /**
     * Name of category object
     */
    private String name;
    /**
     * Short description of object
     */
    private String short_description;
    /**
     * Longer full description of object.
     */
    private String long_description;
    /**
     * Parent category for which this will be a sub-category.
     * If not a sub-category, remains null.
     */
    private IGCItem parent_category;

    // Generated by API. Never set by constructors. //
    private String modified_on;
    private String _name;
    private String created_by;
    private IGCItemList terms;
    private String created_on;
    private ArrayList<IGCItem> _context;
    private IGCItemList category_path;
    private String modified_by;
    private String _id;
    /**
     * API URL at which this resource can be found.
     */
    private String _url;

    // NOTES ON CUSTOM FIELDS:
    //  - Considered making an object that contains all of these.
    //    -> Would mess up JSON formatting when converted to String to PUT or POST to API...
    // TODO *** Will need to add more fields here whenever a new custom field is added to IGC. ***
    // TODO --> Be sure to add a '@SerializedName' annotation to any field that does not perfectly
    //          --- match its IGC counterpart (see 'custom_Contains_PII').

    /**
     * This annotation denotes a different name within IGC (to account for spaces).
     */
    @SerializedName("custom_Contains PII") private String custom_Contains_PII;
    private String custom_Owner;
    private ArrayList<String> custom_Organization;


    /**
     * No argument constructor. Creates an blank category.
     */
    public Category() {
        super();
        this._type = "category";
    }

    /**
     * Make a new category with a name, short description, long description, and parent category.
     * Leaving any argument as NULL will leave the category without that property.
     *
     * @param name Name of the category.
     * @param short_description short description about the category.
     * @param long_description Long description about the category.
     * @param parent_category_id Existing category's ID for which this will be a sub-category.
     *                           Set to NULL if this is to be a root category.
     */
    public Category(String name, String short_description, String long_description, String parent_category_id) {
        super();
        this._type = "category";
        this.name = name;
        this.short_description = short_description;
        this.long_description = long_description;
        this.parent_category = new IGCItem(parent_category_id);
    }

    /**
     * Make a new category with a name, short description, long description, parent category, and custom fields.
     * Leaving any argument as NULL will leave the category without that property.
     *
     * @param name Name of the category.
     * @param short_description short description about the category.
     * @param long_description Long description about the category.
     * @param parent_category_id Existing category's ID for which this will be a sub-category.
     *                        Only set to NULL if this is to be a root category.
     * @param custom_Contains_PII
     * @param custom_Owner Owner of the resource.
     * @param custom_Organization Organization for this resource.
     */
    public Category(String name, String short_description, String long_description, String parent_category_id,
                    String custom_Contains_PII, String custom_Owner, ArrayList<String> custom_Organization) {
        super();
        this._type = "category";
        this.name = name;
        this.short_description = short_description;
        this.long_description = long_description;
        this.parent_category = new IGCItem(parent_category_id);

        this.custom_Contains_PII = custom_Contains_PII;
        this.custom_Owner = custom_Owner;
        this.custom_Organization = custom_Organization;
    }

    //// GETTERS AND SETTERS ////

    public String getModified_on() {
        return modified_on;
    }

    public void setModified_on(String modified_on) {
        this.modified_on = modified_on;
    }

    public String getShort_description() {
        return short_description;
    }

    public void setShort_description(String short_description) {
        this.short_description = short_description;
    }

    public String get_name() {
        return _name;
    }

    public void set_name(String _name) {
        this._name = _name;
    }

    public String getCustom_Contains_PII() {
        return custom_Contains_PII;
    }

    public void setCustom_Contains_PII(String custom_Contains_PII) {
        this.custom_Contains_PII = custom_Contains_PII;
    }

    public String get_type() {
        return _type;
    }

    public void set_type(String _type) {
        this._type = _type;
    }

    public String getCustom_Owner() {
        return custom_Owner;
    }

    public void setCustom_Owner(String custom_Owner) {
        this.custom_Owner = custom_Owner;
    }

    public String getLong_description() {
        return long_description;
    }

    public void setLong_description(String long_description) {
        this.long_description = long_description;
    }

    public String getCreated_by() {
        return created_by;
    }

    public void setCreated_by(String created_by) {
        this.created_by = created_by;
    }

    public IGCItemList getTerms() {
        return terms;
    }

    public void setTerms(IGCItemList terms) {
        this.terms = terms;
    }

    public String getCreated_on() {
        return created_on;
    }

    public void setCreated_on(String created_on) {
        this.created_on = created_on;
    }

    public ArrayList<IGCItem> get_context() {
        return _context;
    }

    public void set_context(ArrayList<IGCItem> _context) {
        this._context = _context;
    }

    public IGCItemList getCategory_path() {
        return category_path;
    }

    public void setCategory_path(IGCItemList category_path) {
        this.category_path = category_path;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public IGCItem getParent_category() {
        return parent_category;
    }

    public void setParent_category(IGCItem parent_category) {
        this.parent_category = parent_category;
    }

    public String getModified_by() {
        return modified_by;
    }

    public void setModified_by(String modified_by) {
        this.modified_by = modified_by;
    }

    public ArrayList<String> getCustom_Organization() {
        return custom_Organization;
    }

    public void setCustom_Organization(ArrayList<String> custom_Organization) {
        this.custom_Organization = custom_Organization;
    }

    public String get_id() {
        return _id;
    }

    public void set_id(String _id) {
        this._id = _id;
    }

    public String get_url() {
        return _url;
    }

    public void set_url(String _url) {
        this._url = _url;
    }

    //// END GETTERS AND SETTERS ////

    /**
     * Converts Term object into JSON String using GSON library.
     * This allows for readable printing of the object.
     *
     * @return Pretty printed String for Category object.
     */
    @Override
    public String toString() {
        Gson gsonPrinter = new GsonBuilder().setPrettyPrinting().create(); //Pretty Printer
        return gsonPrinter.toJson(this);  //Isn't this great?
    }
}
